#!/usr/bin/env macruby

ENV['KARI_ROOT']  ||= File.expand_path('../../', __FILE__)
ENV['KARI_ENV']   ||= 'debug'
ENV['STANDALONE'] = 'false'

class Index
  attr_accessor :index
  def lopsidedCount; 0; end
end
class Match; end

require File.join(ENV["KARI_ROOT"], 'config/boot')

require 'tmpdir'
require 'optparse'

class Kari
  attr_accessor :options
  
  def initialize(options)
    @options = options
  end
  
  def copy_karidoc
    execute "rm -Rf '#{options[:next_karidoc]}' && cp -r '#{options[:current_karidoc]}' '#{options[:next_karidoc]}'"
  end
  
  def update_karidoc
    manager = Manager.new(:filepath => options[:next_karidoc])
    manager.read_from_disk
    options[:paths].each do |path|
      manager.examine(path)
    end
    manager.write_to_disk
    manager.update_symlink
    manager.close
  end
  
  def create_karidoc_bundle
    manager = Manager.new(:filepath => File.join(Dir.pwd, 'Karidoc.default'))
    manager.examine(Manager::SYSTEM_RI_PATH)
    manager.write_to_disk
    manager.close
  end
  
  def create_karidoc_bundle_tarball
    create_karidoc_bundle
    execute "tar -cvjf Karidoc.default.tar.bz2 Karidoc.default && rm -Rf Karidoc.default"
  end
  
  def execute(command)
    log.debug("{E} #{command}")
    `#{command}`
  end
   
  def self.run_command(command, options)
    bin = new(options)
    
    case command
    when 'update', 'up'
      bin.copy_karidoc
      bin.update_karidoc
    when 'cleanup', 'clean'
      Manager.cleanup
    when 'create-bundle', 'cb'
      bin.create_karidoc_bundle
    when 'create-bundle-tarball', 'cbt'
      bin.create_karidoc_bundle_tarball
    else
      puts "[!] Unknown command `#{command}'"
      exit -1
    end
  end
  
  def self.run(argv)
    options = {}
    parser = OptionParser.new do |opts|
      opts.banner = "Usage: kari [command] [options]"
      
      opts.separator ""
      opts.separator "COMMANDS"
      opts.separator "  update | up [options] <paths>"
      opts.on("-c", "--current-karidoc DIRECTORY", String, "The Karidoc directory base the update on") do |directory|
        options[:current_karidoc] = File.expand_path(directory)
      end
      
      opts.on("-n", "--next-karidoc DIRECTORY", String, "The Karidoc directory to write the update to") do |directory|
        options[:next_karidoc] = File.expand_path(directory)
      end
      
      opts.separator "  cleanup | clean"
      opts.separator "    throws away all the stale Karidoc directories"
      opts.separator "  create-bundle | cb"
      opts.separator "    creates a Karidoc.default directory for the system ri directory"
      opts.separator "  create-bundle-tarball | cbt"
      opts.separator "    same as create-bundle, only in a tarball"
      
      opts.separator ""
      opts.separator "OPTIONS"
      opts.on("-h", "--help", "Show help") do
        puts opts
        exit
      end
    end
    
    parser.parse!(argv)
    if command = argv.shift
      options[:paths] = argv
      run_command(command, options)
    else
      puts parser.to_s
    end
  end
end

if __FILE__ == $0
  Kari.run(ARGV)
end