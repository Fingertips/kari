#!/usr/bin/env ruby

ENV['RUBYCOCOA_ROOT'] = SOURCE_ROOT = File.expand_path('../../', __FILE__)
ENV['RUBYCOCOA_ENV'] = 'debug'
ENV['DONT_START_RUBYCOCOA_APP'] = 'true'

require 'rubygems' rescue LoadError
require 'rucola'
require 'tmpdir'

module Rucola
  module RCApp
    class << self
      alias system_defined_application_support_path application_support_path
      def application_support_path
        @application_support_path
      end
      
      def application_support_path=(path)
        @application_support_path = path
      end
    end
  end
end
Rucola::RCApp.application_support_path = File.join(Dir.tmpdir, 'Kari')

require File.join(Rucola::RCApp.root_path, 'build', 'bundles', 'Index.bundle')
require File.join(Rucola::RCApp.root_path, 'build', 'bundles', 'Match.bundle')

require File.expand_path('../../config/boot', __FILE__)

require 'optparse'

class Kari
  attr_accessor :options
  
  def initialize(options)
    @options = options
  end
  
  def clean
    FileUtils.rm_rf(Rucola::RCApp.application_support_path)
    FileUtils.mkdir_p(Rucola::RCApp.application_support_path)
  end
  
  def copy_karidoc
    `rm -Rf '#{Rucola::RCApp.application_support_path}' && cp -R '#{Rucola::RCApp.system_defined_application_support_path}' '#{Rucola::RCApp.application_support_path}'`
  end
  
  def rebuild_karidoc
    watcher = Watcher.new
    unless options[:paths].blank?
      watcher.examine(options[:paths])
    else
      watcher.examineAll
    end
  end
  
  def replace_karidoc
    `rm -Rf '#{Rucola::RCApp.system_defined_application_support_path}' && cp -R '#{Rucola::RCApp.application_support_path}' '#{Rucola::RCApp.system_defined_application_support_path}'`
  end
  
  def package_karidoc
    `cd #{Rucola::RCApp.application_support_path} && tar -cjf #{File.expand_path('Karidoc.tar.bz2', options[:output_directory])} *`
  end
  
  def self.run_command(command, options)
    rebuilder = new(options)
    rebuilder.clean
    
    case command
    when 'update-karidoc'
      rebuilder.copy_karidoc
      rebuilder.rebuild_karidoc
      rebuilder.replace_karidoc
    when 'replace-karidoc'
      rebuilder.rebuild_karidoc
      rebuilder.replace_karidoc
    when 'package-karidoc'
      rebuilder.rebuild_karidoc
      rebuilder.package_karidoc
    else
      puts "[!] Unknown command `#{command}'"
    end
  end
  
  def self.run(argv)
    command = argv.shift
    options = {
      :output_directory => Dir.pwd
    }
    
    OptionParser.new do |opts|
      opts.banner = "Usage: kari [command] [options]"
      
      opts.on("-d", "--output-directory DIRECTORY", String, "Specify the output directory") do |directory|
        options[:output_directory] = File.expand_path(directory)
      end
    end.parse!(argv)
    
    options[:paths] = argv
    
    run_command(command, options)
  end
end

if __FILE__ == $0
  Kari.run(ARGV)
end